// identifier takes a2

grammar Mini;

options {
  language = C;
}
@members
{ 
Graph g(7) ;
int column_counter; // row counter !
bool isInt;
bool isPlus;
}

@header
{
#include"GRLIST.H"
#include <iostream>
#include<string>
using namespace std;

}



loopStatement returns [string result,string s] @init { column_counter = 4; g.setEdge ( 0,0, "LOOP"); } :
'loop' '(' 
i1=identifier ':' 

(n1=number
{
$result= "Loopstatement";
g.setEdge(0,1, $i1.result + " = " + $n1.result); 

isInt=true;
}


| i2=identifier 
 { 
g.setEdge(0,1, $i1.result + " = " + $i2.result); 

isInt=false;
 }) '->' 
 (n2=number
 {
 	if (isInt) g.setEdge(0,2,$n1.result + " < " + $n2.result);
 	else g.setEdge(0,2, $i2.result + " < " + $n2.result); 
 	 }
 |i3=identifier ) 
  {
 	if (isInt) g.setEdge(0,2,$n1.result + " < " + $i3.result);
 	else g.setEdge(0,2, $i2.result + " < " + $i3.result); 
 }
 
 
 
 ','
 ('+'
 {isPlus=true;}
 | '*'
 {isPlus=false;})
( n3=number 
 {
 if (isPlus)
 g.setEdge(0,3, $i1.result + "+= " + $n3.result);
 else
  g.setEdge(0,3, $i1.result + "*= " + $n3.result);
 
 }
 
| i4=identifier)
 {
  
 if (isPlus)
 g.setEdge(0,3, $i1.result + "+= " + $i4.result);
 else
  g.setEdge(0,3, $i1.result + "*= " + $i4.result);
 

 }/**/
  ')'

'do' '['
              ((s1=statement)
              
              
{
g.setEdge(0,column_counter,$s1.result);
column_counter++;
}
               )+  ']'{ g.print();};




statement returns [string result,string s]  :
assignment{ $result = "assignment" ; } | declaration {$result = "declaration";} ;

assignment returns [string result, string s]
	:	'assignment'{$result= "assignment";} | 'ass'{$result= "ass";};	
declaration returns [string result, string s]:
'declaration' { $result = "declaration" ; }

;

expression returns [string result, string s]
	:	'expression'{$result="expression";} | 'exp'{$result="exp";};

								
identifier returns [string result, string s] : 

L0 = LETTER 
	
{
 uint8_t *widget; 	  
 widget = ($L0.text->chars); 
 $s.append(1,*widget);
 $result.assign($s); 
 }
 (
 NUM
 {
 uint8_t *widget; 	  
 widget = ($NUM.text->chars); 
 $s.append(1,*widget);
 $result.assign($s); 
 } 
 | 
 L1 = LETTER 
 {
  uint8_t *widget; 	  
 widget = ($L1.text->chars); 
 $s.append(1,*widget);
 $result.assign($s);
 } )*
 ;
	  

number returns [string result, string s]	:
(NUM	
{
 uint8_t *widget; 	  
 widget = ($NUM.text->chars); 
 $s.append(1,*widget);
 $result.assign($s); 
 } 
 )+;	  	  
LETTER	:	('a' .. 'z'|'A'..'Z');
NUM 		:	('0'..'9')


;


WS : (' '|'\r'|'\t'|'\u000C'|'\n' | 'f')+ {$channel = HIDDEN;};




    
// identifier takes a2

grammar Mini;

options {
  language = C;
}
@members
{ 
Graph g(7) ;
int take_counter; // row counter !
}

@header
{
#include"GRLIST.H"
#include <iostream>
#include<string>
using namespace std;

}


assignment returns [string result, string s] 
@init{ take_counter=0; bool isDec=false;}
 :
 ('var'  
 {
 isDec = true;
 g.setEdge(0,0,"Declaration");
 take_counter=1;
 }
 )?
 
  i1 = identifier

('takes')
{
if (isDec){
g.setEdge( 0,take_counter,"Assignment" ); //edge between declaration and assignment
}

g.setEdge(take_counter ,0,"Assignment"); // Take counter is not necessary for the assignment alone however in the integration it will come in handy;

g.setEdge(take_counter, 1 ,$i1.result);



}
(e1 = expression )
{
g.setEdge ( take_counter, 2 , $e1.result );
take_counter++;
g.print();
}
(
','
i2 = identifier
('takes' 

{
g.setEdge(take_counter,0,"Assignment");
g.setEdge(0,take_counter,"Assignment") ; // add edge betwen assignment and declaration
g.setEdge(take_counter,1,$i2.result);

}

e2=expression
{

g.setEdge ( take_counter, 2 , $e2.result );
take_counter++;
g.print();

}
))* ';';






expression returns [string s, string result] 
	:	
'expression'
{
$s= "expression";		// This is for the simplification of the integration with the other parts of the code
$result="expression";
}  	
								;

identifier returns [string result, string s] : 

L0 = LETTER 
	
{
 uint8_t *widget; 	  
 widget = ($L0.text->chars); 
 $s.append(1,*widget);
 $result.assign($s); 
 }
 (
 NUM
 {
 uint8_t *widget; 	  
 widget = ($NUM.text->chars); 
 $s.append(1,*widget);
 $result.assign($s); 
 } 
 | 
 L1 = LETTER 
 {
  uint8_t *widget; 	  
 widget = ($L1.text->chars); 
 $s.append(1,*widget);
 $result.assign($s);
 } )*
 ;
	  
	  
	 /* (NUM
	  {
	  uint8_t *ridg;
	  cout << "Im here" << endl; 
	        ridg = ($NUM.text->chars); 
	              $s.append(1,*ridg);
	  $result.assign($s); 
	  cout << "$result = " << $result << endl;} 
	   | LETTER 
	  { 
	  widget = ($LETTER.text->chars); 
          $s.append(1,*widget);
	  $result.assign($s); } */
	  	  
LETTER	:	('a' .. 'z'|'A'..'Z');
NUM 	:	('0'..'9');


WS : (' '|'\r'|'\t'|'\u000C'|'\n' | 'f')+ {$channel = HIDDEN;};




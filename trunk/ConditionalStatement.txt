// identifier takes a2

grammar Mini;

options {
  language = C;
}
@members
{ 
Graph g(7) ;
int Cstatement_counter;
int row_counter;
bool nested_if;

}

@header
{
#include"GRLIST.H"
#include <iostream>
#include<string>
using namespace std;
}

start 	:	'begin'{row_counter=-1; nested_if = false;} statement;
statement returns [string result,string s] @init {}:
assignment{ $result = "assignment" ; } | conditionalStatement { $result = "CondStatement";  } ;

assignment returns [string result, string s]
	:	'assignment'{$result= "assignment";} | 'ass'{$result= "ass";};	

expression returns [string result, string s]
	:	'expression'{$result="expression";} | 'exp'{$result="exp";};

conditionalStatement returns [string result, string s]
@init 
{
row_counter++;
g.setEdge(row_counter,0,"CondStatement");
$result = "CondStatement";
}

	: 'is' 
	'(' 
	(e1=expression) 
	{
	Cstatement_counter = 1 ;
	g.setEdge(row_counter,1,$e1.result);
	g.setEdge(row_counter + 1,0,$e1.result);
	row_counter++;

	}
	
	')'
					  
						  
	'do' '['
	(s1=statement
	{
	g.setEdge (row_counter,Cstatement_counter,$s1.result);
	Cstatement_counter++;
	}
	)+
        ']'	 (
        'oris' 
	e2=expression
	{
	g.setEdge(row_counter-1, 2, $e2.result );
	row_counter++;
	g.setEdge(row_counter,0,$e2.result); 	
	Cstatement_counter=1;
	}
			
	 'do' '['
	(s2= statement
	{
	g.setEdge(row_counter, Cstatement_counter, $s2.result);
	Cstatement_counter++;
	
	}
	)+

	 ']'
	 )*
	  (
	  'isnot'
	  {
	  g.setEdge(row_counter-2,3,"Else");
	  row_counter++;
	  g.setEdge(row_counter,0,"Else");
	  Cstatement_counter=1;
	  
	  }
	  'do' '['{g.print();} 
	  (s3=statement
	  {
	  g.setEdge(row_counter, Cstatement_counter,$s3.result);
	  Cstatement_counter++;
	  
	  }
	  
	  )*
	  ']'
	  )*{g.print();} 
						  ;
							

identifier returns [string result, string s] : 

L0 = LETTER 
	
{
 uint8_t *widget; 	  
 widget = ($L0.text->chars); 
 $s.append(1,*widget);
 $result.assign($s); 
 }
 (
 NUM
 {
 uint8_t *widget; 	  
 widget = ($NUM.text->chars); 
 $s.append(1,*widget);
 $result.assign($s); 
 } 
 | 
 L1 = LETTER 
 {
  uint8_t *widget; 	  
 widget = ($L1.text->chars); 
 $s.append(1,*widget);
 $result.assign($s);
 } )*
 ;
	  

	  	  
LETTER	:	('a' .. 'z'|'A'..'Z');
NUM 	:	('0'..'9');


WS : (' '|'\r'|'\t'|'\u000C'|'\n' | 'f')+ {$channel = HIDDEN;};



